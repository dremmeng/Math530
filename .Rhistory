sampleMedian[k] <- median(Y)
}
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
sampleMedian<- rep( NA, M)
pdf <- function(u) u/(1+u)^2
U<-  runif(n)
for (k in 1:M ){
# generate the kth sample of size n
Y<- t_custom <- pdf(U)
sampleAverage[k]<- mean( Y)
sampleMedian[k] <- median(Y)
}
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
h=hist(sampleMedian,probability=TRUE)
sd(sampleAverage)
mean(sampleAverage)
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
sampleMedian<- rep( NA, M)
pdf <- function(u) u/(1+u)^2
U<-  runif(n)
for (k in 1:M ){
# generate the kth sample of size n
Y <- pdf(U)
sampleAverage[k]<- mean( Y)
sampleMedian[k] <- median(Y)
}
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
h=hist(sampleMedian,probability=TRUE)
sd(sampleAverage)
mean(sampleAverage)
set.seed(444)
n<- 250
#### simulating sample
U<-  runif(n)
mySample<- U/(1-U)
####
# and take a look at the histogram and density function
# as a sanity check
hist( mySample, probability =TRUE)
grid<- seq( 0, quantile(mySample,.99), length.out=200)
pdf<-  1/ ( 1 + grid)^2
lines( grid, pdf, col="magenta")
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
sampleMedian<- rep( NA, M)
pdf <- function(u) u/(1+u)^2
U<-  runif(n)
for (k in 1:M ){
# generate the kth sample of size n
Y <- pdf(U)
sampleAverage[k]<- mean( Y)
sampleMedian[k] <- median(Y)
}
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
h=hist(sampleMedian,probability=TRUE)
sd(sampleAverage)
mean(sampleAverage)
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
sampleMedian<- rep( NA, M)
pdf <- function(u) u/(1+u)^2
U<-  runif(n)
for (k in 1:M ){
# generate the kth sample of size n
Y <- pdf(U)
sampleAverage[k]<- mean( Y)
sampleMedian[k] <- median(Y)
}
sampleAverage
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
h=hist(sampleMedian,probability=TRUE)
sd(sampleAverage)
mean(sampleAverage)
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
sampleMedian<- rep( NA, M)
pdf <- function(u) u/(1+u)^2
for (k in 1:M ){
# generate the kth sample of size n
U<-  runif(n)
Y <- pdf(U)
sampleAverage[k]<- mean( Y)
sampleMedian[k] <- median(Y)
}
sampleAverage
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
h=hist(sampleMedian,probability=TRUE)
sd(sampleAverage)
mean(sampleAverage)
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
sampleMedian<- rep( NA, M)
pdf <- function(u) u/(1+u)^2
for (k in 1:M ){
# generate the kth sample of size n
U<-  runif(n)
Y <- pdf(U)
sampleAverage[k]<- mean( Y)
sampleMedian[k] <- median(Y)
}
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
h=hist(sampleMedian,probability=TRUE)
sd(sampleAverage)
mean(sampleAverage)
knitr::opts_chunk$set(echo = TRUE)
BoulderSnowfall<-
read.table("BoulderSnowfall.txt", header=TRUE )
# note subscripts based on the names to make this easier to
# follow year is also column 14 in the data object.
year<-    BoulderSnowfall[ ,'Year']
snowAllYears<- BoulderSnowfall[, 'Sep.Jun']
snow<- snowAllYears[year >= 1961]
seed(123)
set.seed(123)
CI=matrix(nrow=25,ncol=2)
for (i in 1:25)
x1=rnorm(20,50,6)
sample_means[i]=mean(x1)
set.seed(123)
CI=matrix(nrow=25,ncol=2)
sample_means=numeric(25)
for (i in 1:25)
x1=rnorm(20,50,6)
sample_means[i]=mean(x1)
se=6/sqrt(20)
for (i in 1:25)
me=qt(.975,df=19)*se
lower=sample_means[i]-me
upper=sample_means[i]+me
CI[i,]=c(lower,upper)
CI
set.seed(123)
CI=matrix(nrow=25,ncol=2)
sample_means=numeric(25)
for (i in 1:25)
x1=rnorm(20,50,6)
sample_means[i]=mean(x1)
se=6/sqrt(20)
for (i in 1:25)
me=qt(.975,df=19)*se
lower=sample_means[i]-me
upper=sample_means[i]+me
CI[i,]=c(lower,upper)}
set.seed(123)
CI=matrix(nrow=25,ncol=2)
sample_means=numeric(25)
for (i in 1:25)
x1=rnorm(20,50,6)
sample_means[i]=mean(x1)
se=6/sqrt(20)
for (i in 1:25)
me=qt(.975,df=19)*se
lower=sample_means[i]-me
upper=sample_means[i]+me
CI[i,]=c(lower,upper)
CI
set.seed(123)
CI=matrix(nrow=25,ncol=2)
sample_means=numeric(25)
for (i in 1:25)
x1=rnorm(20,50,6)
sample_means[i]=mean(x1)
se=6/sqrt(20)
sample_means
for (i in 1:25)
me=qt(.975,df=19)*se
lower=sample_means[i]-me
upper=sample_means[i]+me
CI[i,]=c(lower,upper)
CI
set.seed(123)
CI=matrix(nrow=25,ncol=2)
sample_means=numeric(25)
for (i in 1:25){
x1=rnorm(20,50,6)
sample_means[i]=mean(x1)
}
se=6/sqrt(20)
sample_means
for (i in 1:25)
me=qt(.975,df=19)*se
lower=sample_means[i]-me
upper=sample_means[i]+me
CI[i,]=c(lower,upper)
CI
set.seed(123)
CI=matrix(nrow=25,ncol=2)
sample_means=numeric(25)
for (i in 1:25){
x1=rnorm(20,50,6)
sample_means[i]=mean(x1)
}
se=6/sqrt(20)
sample_means
for (i in 1:25){
me=qt(.975,df=19)*se
lower=sample_means[i]-me
upper=sample_means[i]+me
CI[i,]=c(lower,upper)
}
CI
set.seed(123)
CI=matrix(nrow=25,ncol=2)
sample_means=numeric(25)
for (i in 1:25){
x1=rnorm(20,50,6)
sample_means[i]=mean(x1)
}
se=6/sqrt(20)
sample_means
for (i in 1:25){
me=qt(.975,df=19)*se
lower=sample_means[i]-me
upper=sample_means[i]+me
CI[i,]=c(lower,upper)
}
CI
c_mu=sum(CI[,1]<=50&CI[,2]>=50)
c_mu
set.seed(123)
CI=matrix(nrow=25,ncol=2)
sample_means=numeric(25)
for (i in 1:25){
x1=rnorm(20,50,6)
sample_means[i]=mean(x1)
}
se=6/sqrt(20)
sample_means
for (i in 1:25){
me=qt(.975,df=19)*se
lower=sample_means[i]-me
upper=sample_means[i]+me
CI[i,]=c(lower,upper)
}
CI
c_mu=sum(CI[,1]<=50&CI[,2]>=50)
c_mu
CI=matrix(nrow=25,ncol=2)
sample_means=numeric(25)
for (i in 1:25){
x1=rnorm(20,50,6)
sample_means[i]=mean(x1)
}
se=6/sqrt(100)
sample_means
for (i in 1:25){
me=qt(.975,df=99)*se
lower=sample_means[i]-me
upper=sample_means[i]+me
CI[i,]=c(lower,upper)
}
CI
c_mu=sum(CI[,1]<=50&CI[,2]>=50)
c_mu
set.seed(123)
CI=matrix(nrow=25,ncol=2)
sample_means=numeric(25)
for (i in 1:25){
x1=rnorm(20,50,6)
sample_means[i]=mean(x1)
}
se=6/sqrt(20)
sample_means
for (i in 1:25){
me=qt(.975,df=19)*se
lower=sample_means[i]-me
upper=sample_means[i]+me
CI[i,]=c(lower,upper)
}
CI
c_mu=sum(CI[,1]<=50&CI[,2]>=50)
c_mu
c_mu=sum(CI[,1]<=53&CI[,2]>=53)
c_mu
CI=matrix(nrow=25,ncol=2)
sample_means=numeric(25)
for (i in 1:25){
x1=rnorm(20,50,6)
sample_means[i]=mean(x1)
}
se=6/sqrt(100)
sample_means
for (i in 1:25){
me=qt(.975,df=99)*se
lower=sample_means[i]-me
upper=sample_means[i]+me
CI[i,]=c(lower,upper)
}
CI
c_mu=sum(CI[,1]<=50&CI[,2]>=50)
c_mu
set.seed(123)
CI=matrix(nrow=25,ncol=2)
sample_means=numeric(25)
for (i in 1:25){
x1=rnorm(20,50,6)
sample_means[i]=mean(x1)
}
se=6/sqrt(20)
sample_means
for (i in 1:25){
me=qt(.975,df=19)*se
lower=sample_means[i]-me
upper=sample_means[i]+me
CI[i,]=c(lower,upper)
}
CI
c_mu=sum(CI[,1]<=50&CI[,2]>=50)
c_mu
c_mu=sum(CI[,1]<=53&CI[,2]>=53)
c_mu
CI=matrix(nrow=25,ncol=2)
sample_means=numeric(25)
for (i in 1:25){
x1=rnorm(20,50,6)
sample_means[i]=mean(x1)
}
se=6/sqrt(100)
sample_means
for (i in 1:25){
me=qt(.975,df=99)*se
lower=sample_means[i]-me
upper=sample_means[i]+me
CI[i,]=c(lower,upper)
}
CI
c_mu=sum(CI[,1]<=50&CI[,2]>=50)
c_mu=sum(CI[,1]<=53&CI[,2]>=53)
c_mu
n <- 9
alpha <- 0.05
type1_errors_mu0 <- 0
type2_errors_mu0 <- 0
type1_errors_mu1 <- 0
type2_errors_mu1 <- 0
for (i in 1:100) {
x <- rnorm(n, mean = 0, sd = 1)
# Perform a one-sample t-test
t_test_result_mu0 <- t.test(x, mu = 1, alternative = "greater")
# Increment the counter for Type I errors if H0 is rejected
if (t_test_result_mu0$p.value < alpha) {
type1_errors_mu0 <- type1_errors_mu0 + 1
}
else {
type2_errors_mu0 <- type2_errors_mu0 + 1
}
x <- rnorm(n, mean = 1, sd = 1)
# Perform a one-sample t-test
t_test_result_mu1 <- t.test(x, mu = 1, alternative = "greater")
# Increment the counter for Type I errors if H0 is rejected
if (t_test_result_mu1$p.value < alpha) {
type1_errors_mu1 <- type1_errors_mu1 + 1
}
else {
type2_errors_mu1 <- type2_errors_mu1 + 1
}
}
prop_type1_errors_
n <- 9
alpha <- 0.05
type1_errors_mu0 <- 0
type2_errors_mu0 <- 0
type1_errors_mu1 <- 0
type2_errors_mu1 <- 0
for (i in 1:100) {
x <- rnorm(n, mean = 0, sd = 1)
# Perform a one-sample t-test
t_test_result_mu0 <- t.test(x, mu = 1, alternative = "greater")
# Increment the counter for Type I errors if H0 is rejected
if (t_test_result_mu0$p.value < alpha) {
type1_errors_mu0 <- type1_errors_mu0 + 1
}
else {
type2_errors_mu0 <- type2_errors_mu0 + 1
}
x <- rnorm(n, mean = 1, sd = 1)
# Perform a one-sample t-test
t_test_result_mu1 <- t.test(x, mu = 1, alternative = "greater")
# Increment the counter for Type I errors if H0 is rejected
if (t_test_result_mu1$p.value < alpha) {
type1_errors_mu1 <- type1_errors_mu1 + 1
}
else {
type2_errors_mu1 <- type2_errors_mu1 + 1
}
}
prop_type1_errors_mu0 <- type1_errors_mu0 / 100
prop_type2_errors_mu1 <- type2_errors_mu1 / 100
n <- 9
alpha <- 0.05
type1_errors_mu0 <- 0
type2_errors_mu0 <- 0
type1_errors_mu1 <- 0
type2_errors_mu1 <- 0
for (i in 1:100) {
x <- rnorm(n, mean = 0, sd = 1)
# Perform a one-sample t-test
t_test_result_mu0 <- t.test(x, mu = 1, alternative = "greater")
# Increment the counter for Type I errors if H0 is rejected
if (t_test_result_mu0$p.value < alpha) {
type1_errors_mu0 <- type1_errors_mu0 + 1
}
else {
type2_errors_mu0 <- type2_errors_mu0 + 1
}
x <- rnorm(n, mean = 1, sd = 1)
# Perform a one-sample t-test
t_test_result_mu1 <- t.test(x, mu = 1, alternative = "greater")
# Increment the counter for Type I errors if H0 is rejected
if (t_test_result_mu1$p.value < alpha) {
type1_errors_mu1 <- type1_errors_mu1 + 1
}
else {
type2_errors_mu1 <- type2_errors_mu1 + 1
}
}
prop_type1_errors_mu0 <- type1_errors_mu0 / 100
prop_type2_errors_mu1 <- type2_errors_mu1 / 100
prop_type1_errors_mu0
prop_type2_errors_mu1
BoulderSnowfall<-
read.table("BoulderSnowfall.txt", header=TRUE )
# note subscripts based on the names to make this easier to
# follow year is also column 14 in the data object.
year<-    BoulderSnowfall[ ,'Year']
snowAllYears<- BoulderSnowfall[, 'Sep.Jun']
snow<- snowAllYears[year >= 1961]
BoulderSnowfall<-
read.table("BoulderSnowfall.txt", header=TRUE )
# note subscripts based on the names to make this easier to
# follow year is also column 14 in the data object.
year<-    BoulderSnowfall[ ,'Year']
snowAllYears<- BoulderSnowfall[, 'Sep.Jun']
snow<- snowAllYears[year >= 1961]
sm=mean(snow)
n=length(snow)
ssd=sd(snow)
sse=ssd/sqrt(n)
alpha=.05
df=n-1
tscore=qt(p=alpha/2,df=df,lower.tail=FALSE)
error=tscore*sse
lower=sm - error
upper=sm+error
lower
upper
class(BoulderSnowfall)
sum(snow==999)
sum(snow==999)
sum(snow.isna)
sum(snow==999)
sum(is.na(snow))
stem(snow)
qqnorm(snow)
scatter.smooth(year,snowAllYears,xlab="Year",ylab="Snow Fall Inches")
View(BoulderSnowfall)
scatter.smooth(year,snowAllYears,xlab="Year",ylab="Snow Fall Inches")
mean(snowAllYears)
N<- length( snow)
frac<- ((1:N) - .5)/N
Z<- sort( snow )
ZPerfect<- qnorm( frac)
plot( ZPerfect, Z, xlab="predicted quantile",
ylab="observed quantile")
set.seed(333)
mu<- mean(snow)
sigma<- sd( snow)
for( k in 1:25){
Zsim<- sort(
rnorm( N, mean=mu, sd=sigma )
)
points(ZPerfect, Zsim, col="grey", pch=16 )
}
abline( 0,1, col="black", lwd=2)
points( ZPerfect, Z, col="magenta",pch=16 )
points( ZPerfect, Z ) # add a pleasing black outline to points
title("Mystery QQ plot")
knitr::opts_chunk$set(echo = TRUE)
30+1.645*10/sqrt(100)
30-1.645*10/sqrt(100)
110.5+1.645*3/sqrt(10)
110.5-1.645*3/sqrt(10)
110.5-1.645*3/sqrt(10)
110.5+1.645*3/sqrt(10)
.5^(10)
1-.5^(10)
