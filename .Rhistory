sort(simNorm)
quantile(simNorm,probs=c(.10,.90))
hist( simNorm, probability=TRUE, col="green")
xValues<- seq( 16.1 - 4*.5, 16.1 + 4*.5, length.out=250 )
pdf<- dnorm( xValues, mean=16.1, sd=.5)
simNorm<-rnorm(100000,mean=16.1, sd=.5)
hist(simNorm,breaks=150,freq=FALSE)
lines(xValues,pdf)
simNorm <- rnorm(1000, 16.1,.05)
sort(simNorm)
quantile(simNorm,probs=c(.10,.90))
simNorm <- rnorm(1000, 16.1,.05)
quantile(simNorm,probs=c(.10,.90))
simNorm <- rnorm(10000, 16.1,.05)
quantile(simNorm,probs=c(.10,.90))
xValues<- seq( 16.1 - 4*.5, 16.1 + 4*.5, length.out=250 )
pdf<- dnorm( xValues, mean=16.1, sd=.5)
hist(simNorm,breaks=150,freq=FALSE)
lines(xValues,pdf)
xValues<- seq( 16.1 - 4*.5, 16.1 + 4*.5, length.out=250 )
pdf<- dnorm( xValues, mean=16.1, sd=.5)
simNorm<-rnorm(100000,mean=16.1, sd=.5)
hist(simNorm,breaks=150,freq=FALSE)
lines(xValues,pdf)
simNorm<-rnorm(100000,mean=16.1, sd=.5)
quantile(simNorm,probs=c(.10,.90))
hist( simNorm, probability=TRUE, col="green")
xValues<- seq( 16.1 - 4*.5, 16.1 + 4*.5, length.out=250 )
pdf<- dnorm( xValues, mean=16.1, sd=.5)
simNorm<-rnorm(100000,mean=16.1, sd=.5)
hist(simNorm,breaks=150,freq=FALSE)
lines(xValues,pdf)
xValues<- seq( 16.1 - 4*.5, 16.1 + 4*.5, length.out=250 )
pdf<- dnorm( xValues, mean=16.1, sd=.5)
hist(simNorm,breaks=150,freq=FALSE)
lines(xValues,pdf)
knitr::opts_chunk$set(echo = TRUE)
bagSample<- sample( X,50 , replace = TRUE)
set.seed( 123)
n<- 50
X<- runif( n)
bagSample<- sample( X,n , replace = TRUE)
m<- length( unique( bagSample))
fracMissing<-  1- m/n
print( fracMissing)
set.seed( 123)
n<- 50
X<- runif( n)
nBag<- 2000
outOfBagSize<- rep(NA, nBag)
for(  k in 1:nBag){
bagSample<- sample( X,n , replace = TRUE)
m<- length( unique( bagSample))
outOfBagSize[k]<- n-m
}
mean(  outOfBagSize/n)
exp( -1)
suppressMessages(library( fields))
install.packages("fields")
suppressMessages(library( fields))
stats( outOfBagSize/n )
set.seed( 123)
n<- 50
X<- runif( n)
bagSample<- sample( X,n , replace = TRUE)
m<- length( unique( bagSample))
fracMissing<-  1- m/n
print( fracMissing)
set.seed( 123)
n<- 50
X<- runif( n)
nBag<- 2000
outOfBagSize<- rep(NA, nBag)
for(  k in 1:nBag){
bagSample<- sample( X,n , replace = TRUE)
m<- length( unique( bagSample))
outOfBagSize[k]<- n-m
}
mean(  outOfBagSize/n)
exp( -1)
knitr::opts_chunk$set(echo = TRUE)
set.seed( 123)
n<- 50
X<- runif( n)
bagSample<- sample( X,n , replace = TRUE)
m<- length( unique( bagSample))
fracMissing<-  1- m/n
print( fracMissing)
set.seed( 123)
n<- 50
X<- runif( n)
nBag<- 2000
outOfBagSize<- rep(NA, nBag)
for(  k in 1:nBag){
bagSample<- sample( X,n , replace = TRUE)
m<- length( unique( bagSample))
outOfBagSize[k]<- n-m
}
mean(  outOfBagSize/n)
exp( -1)
suppressMessages(library( fields))
stats( outOfBagSize/n )
hist(outOfBagSize)
hist(outOfBagSize)
m=mean(outOfBagSize)
std=sd(outOfBagSize)
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(outOfBagSize)
m=mean(outOfBagSize)
std=sd(outOfBagSize)
dnorm(x,mean=m=sd=std)
hist(outOfBagSize)
m=mean(outOfBagSize)
std=sd(outOfBagSize)
dnorm(x,mean=m,sd=std)
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
xValues<- seq( m - 4*std, m+ 4*std, length.out=250 )
pdf<- dnorm( xValues, mean=m, sd=std)
hist(outOfBagSize,breaks=150,freq=FALSE)
lines(xValues,pdf)
xValues<- seq( m - 4*std, m+ 4*std, length.out=250 )
pdf<- dnorm( xValues, mean=m, sd=std)
hist(outOfBagSize,freq=FALSE)
lines(xValues,pdf)
sd(outOfBagSize)
p=1/exp(1)
p(1-p)
sd(outOfBagSize)
p=1/exp(1)
p*(1-p)
sd(outOfBagSize)
p=1/exp(1)
50*p*(1-p)
sd(outOfBagSize)
p=1/exp(1)
p*(1-p)
sd(outOfBagSize)
p=1/exp(1)
sqrt(p*(1-p)/50)
sd(outOfBagSize)
p=1/exp(1)
sqrt(50*p*(1-p))
set.seed( 123)
n<- 50
X<- runif( n)
nBag<- 2000
outOfBagSize<- rep(NA, nBag)
for(  k in 1:nBag){
bagSample<- sample( X,n , replace = TRUE)
m<- length( unique( bagSample))
outOfBagSize[k]<- n-m
}
mean(  outOfBagSize/n)
exp( -1)
load("BoulderDaily.rda")
# and examine first few months of data are missing ...
head(BoulderDaily,4 )
tail( BoulderDaily,4)
boxplot(BoulderDaily$tmean ~ BoulderDaily$month )
boxplot(BoulderDaily$tmean ~ BoulderDaily$month,title="Mean Tmeperature per Month",xlab="Month",ylab="Mean Temperature")
boxplot(BoulderDaily$tmean ~ BoulderDaily$month, title="Mean Tmeperature per Month",xlab="Month",ylab="Mean Temperature")
boxplot(BoulderDaily$tmean ~ BoulderDaily$month, title="Mean Tmeperature per Month",xlab="Month",ylab="Mean Temperature")
title(main="Mean Temperature vs Month")
boxplot(BoulderDaily$tmax, BoulderDaily$year)
abline( h= mean( BoulderDaily$tmax, na.rm=TRUE), col="magenta")
View(BoulderDaily)
boxplot( BoulderDaily$year,BoulderDaily$tmax)
abline( h= mean( BoulderDaily$tmax, na.rm=TRUE), col="magenta")
View(BoulderDaily)
boxplot(BoulderDaily$tmax ~ BoulderDaily$year, title="Mean Tmeperature per Year",xlab="Year",ylab="Mean Temperature")
title(main="Mean Temperature vs Month")
boxplot(BoulderDaily$tmax ~ BoulderDaily$year, title="Mean Tmeperature per Year",xlab="Year",ylab="Mean Temperature")
title(main="Mean Temperature vs Month")
abline( h= mean( BoulderDaily$tmax, na.rm=TRUE), col="magenta")
boxplot(BoulderDaily$tmax ~ BoulderDaily$year, title="Mean Tmeperature per Year",xlab="Year",ylab="Mean Temperature")
title(main="Mean Temperature vs Year")
abline( h= mean( BoulderDaily$tmax, na.rm=TRUE), col="magenta")
boxplot(BoulderDaily$tmax ~ BoulderDaily$year, title="Max Tmeperature per Year",xlab="Year",ylab="Max Temperature")
title(main="Mean Temperature vs Year")
abline( h= mean( BoulderDaily$tmax, na.rm=TRUE), col="magenta")
View(BoulderDaily)
boxplot(BoulderDaily$precip ~ BoulderDaily$Month, title="Precipitation Per Month",xlab="Month",ylab="Precipitation")
boxplot(BoulderDaily$precip ~ BoulderDaily$month, title="Precipitation Per Month",xlab="Month",ylab="Precipitation")
title(main="Precipitation vs Month")
boxplot(BoulderDaily$precip ~ BoulderDaily$month, title="Precipitation Per Month",xlab="Month",ylab="Precipitation")
title(main="Precipitation vs Month")
N<- nrow(BoulderDaily )
# the first value is missing because it the day before # the data starts
tmaxLag1<- c(NA, BoulderDaily$tmax[1: (N-1)])
BoulderDaily$tmaxLag1<- tmaxLag1
# to check compare the values from days 201 to 205
index<- 201:205
BoulderDaily[index,]
cor( BoulderDaily$tmaxLag1 , BoulderDaily$tmax, use="complete" )
library( fields)
bplot.xy( BoulderDaily$tmaxLag1,BoulderDaily$tmax,
N=10)
library( fields)
scatter.smooth(BoulderDaily$tmaxLag1, BoulderDaily$tmax)
bplot.xy( BoulderDaily$tmaxLag1,BoulderDaily$tmax,
N=10)
corTable<- rep( NA, 12)
sdTable<- rep( NA, 12)
for( k in 1:12){
ind<- which( BoulderDaily$month==k )
corTable[k]<- cor( BoulderDaily$tmaxLag1[ind] ,
BoulderDaily$tmax[ind],
use="complete" )
sdTable[k]<- sd( BoulderDaily$tmax[ind], na.rm=TRUE )
}
corTable<- rep( NA, 12)
sdTable<- rep( NA, 12)
for( k in 1:12){
ind<- which( BoulderDaily$month==k )
corTable[k]<- cor( BoulderDaily$tmaxLag1[ind] ,
BoulderDaily$tmax[ind],
use="complete" )
sdTable[k]<- sd( BoulderDaily$tmax[ind], na.rm=TRUE )
}
corTable<- rep( NA, 12)
sdTable<- rep( NA, 12)
for( k in 1:12){
ind<- which( BoulderDaily$month==k )
corTable[k]<- cor( BoulderDaily$tmaxLag1[ind] ,
BoulderDaily$tmax[ind],
use="complete" )
sdTable[k]<- sd( BoulderDaily$tmax[ind], na.rm=TRUE )
}
sdTable
corTable<- rep( NA, 12)
sdTable<- rep( NA, 12)
for( k in 1:12){
ind<- which( BoulderDaily$month==k )
corTable[k]<- cor( BoulderDaily$tmaxLag1[ind] ,
BoulderDaily$tmax[ind],
use="complete" )
sdTable[k]<- sd( BoulderDaily$tmax[ind], na.rm=TRUE )
}
sdTable
plot(sdTable)
plot(corTable)
std=sd(outOfBagSize)
m=mean(outOfBagSize)
xValues<- seq( m - 4*std, m+ 4*std, length.out=250 )
pdf<- dnorm( xValues, mean=m, sd=std)
hist(outOfBagSize,freq=FALSE)
lines(xValues,pdf)
knitr::opts_chunk$set(echo = TRUE)
set.seed( 232)
expSample<- rexp( 250, rate=5)
hist(expSample,probability = TRUE)
abline(v= 1/5, col="magenta")
hist(expSample,probability = TRUE)
abline(v= 1/5, col="magenta")
abline(v=mean(expSample,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100) #seq of x for pdf
h=hist(expSample,probability = TRUE)
abline(v= 1/5, col="magenta")
abline(v=mean(expSample,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100) #seq of x for pdf
lines(x = xlines,y=dexp(xlines,rate=5) *length(x)*diff(h$breaks)[1])
h=hist(expSample,probability = TRUE)
abline(v= 1/5, col="magenta")
abline(v=mean(expSample,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
lines(x = xlines,y=dexp(xlines,rate=5))
expSample1<- expSample * 5
h=hist(expSample1,probability = TRUE)
abline(v= 1/5, col="magenta")
abline(v=mean(expSample1,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
lines(x = xlines,y=dexp(xlines,rate=5)*5)
expSample1<- expSample * 5
h=hist(expSample1,probability = TRUE)
abline(v= 1, col="magenta")
abline(v=mean(expSample1,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
lines(x = xlines,y=dexp(xlines,rate=5)*5)
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
for (k in 1:M ){
# generate the kth sample of size n
Y<- rexp( n, rate=5)
sampleAverage[k]<- mean( Y)
}
h=hist(sampleAverage,probability = TRUE)
abline(v= 1, col="magenta")
abline(v=mean(expSample1,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
lines(x = xlines,y=dexp(xlines,rate=5)*5)
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
lines(x = xlines,y=dexp(xlines,rate=5)*5)
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
lines(x = xlines,y=dnorm(xlines,1/5,0))
h=hist(sampleAverage,probability = FALSE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
lines(x = xlines,y=dnorm(xlines,1/5,0))
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
sigma=1/(5*sqrt(30))
mu=1/5
lines(x = xlines,y=dnorm(xlines,mu,sigma))
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
sigma=1/(5*sqrt(30))
mu=1/5
lines(x = xlines,y=dnorm(xlines,mu,sigma))
sd(sampleAverage)
mean(sampleAverage)
M<- 500
n<- 4
set.seed(530)
sampleAverage<- rep( NA, M)
for (k in 1:M ){
# generate the kth sample of size n
Y<- rexp( n, rate=5)
sampleAverage[k]<- mean( Y)
}
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
sigma=1/(5*sqrt(4))
mu=1/5
lines(x = xlines,y=dnorm(xlines,mu,sigma))
sd(sampleAverage)
mean(sampleAverage)
sigma
set.seed(444)
n<- 250
#### simulating sample
U<-  runif(n)
mySample<- U/(1-U)
####
# and take a look at the histogram and density function
# as a sanity check
hist( mySample, probability =TRUE)
grid<- seq( 0, quantile(mySample,.99), length.out=200)
pdf<-  1/ ( 1 + grid)^2
lines( grid, pdf, col="magenta")
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
pdf <- function(u) u/(1+u)^2
U<-  runif(n)
for (k in 1:M ){
# generate the kth sample of size n
Y<- t_custom <- pdf(u)
sampleAverage[k]<- mean( Y)
}
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
pdf <- function(u) u/(1+u)^2
U<-  runif(n)
for (k in 1:M ){
# generate the kth sample of size n
Y<- t_custom <- pdf(U)
sampleAverage[k]<- mean( Y)
}
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
pdf <- function(u) u/(1+u)^2
U<-  runif(n)
for (k in 1:M ){
# generate the kth sample of size n
Y<- t_custom <- pdf(U)
sampleAverage[k]<- mean( Y)
sampleMedian[k] <- median(Y)
}
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
sampleMedian<- rep( NA, M)
pdf <- function(u) u/(1+u)^2
U<-  runif(n)
for (k in 1:M ){
# generate the kth sample of size n
Y<- t_custom <- pdf(U)
sampleAverage[k]<- mean( Y)
sampleMedian[k] <- median(Y)
}
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
h=hist(sampleMedian,probability=TRUE)
sd(sampleAverage)
mean(sampleAverage)
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
sampleMedian<- rep( NA, M)
pdf <- function(u) u/(1+u)^2
U<-  runif(n)
for (k in 1:M ){
# generate the kth sample of size n
Y <- pdf(U)
sampleAverage[k]<- mean( Y)
sampleMedian[k] <- median(Y)
}
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
h=hist(sampleMedian,probability=TRUE)
sd(sampleAverage)
mean(sampleAverage)
set.seed(444)
n<- 250
#### simulating sample
U<-  runif(n)
mySample<- U/(1-U)
####
# and take a look at the histogram and density function
# as a sanity check
hist( mySample, probability =TRUE)
grid<- seq( 0, quantile(mySample,.99), length.out=200)
pdf<-  1/ ( 1 + grid)^2
lines( grid, pdf, col="magenta")
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
sampleMedian<- rep( NA, M)
pdf <- function(u) u/(1+u)^2
U<-  runif(n)
for (k in 1:M ){
# generate the kth sample of size n
Y <- pdf(U)
sampleAverage[k]<- mean( Y)
sampleMedian[k] <- median(Y)
}
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
h=hist(sampleMedian,probability=TRUE)
sd(sampleAverage)
mean(sampleAverage)
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
sampleMedian<- rep( NA, M)
pdf <- function(u) u/(1+u)^2
U<-  runif(n)
for (k in 1:M ){
# generate the kth sample of size n
Y <- pdf(U)
sampleAverage[k]<- mean( Y)
sampleMedian[k] <- median(Y)
}
sampleAverage
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
h=hist(sampleMedian,probability=TRUE)
sd(sampleAverage)
mean(sampleAverage)
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
sampleMedian<- rep( NA, M)
pdf <- function(u) u/(1+u)^2
for (k in 1:M ){
# generate the kth sample of size n
U<-  runif(n)
Y <- pdf(U)
sampleAverage[k]<- mean( Y)
sampleMedian[k] <- median(Y)
}
sampleAverage
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
h=hist(sampleMedian,probability=TRUE)
sd(sampleAverage)
mean(sampleAverage)
M<- 500
n<- 30
set.seed(530)
sampleAverage<- rep( NA, M)
sampleMedian<- rep( NA, M)
pdf <- function(u) u/(1+u)^2
for (k in 1:M ){
# generate the kth sample of size n
U<-  runif(n)
Y <- pdf(U)
sampleAverage[k]<- mean( Y)
sampleMedian[k] <- median(Y)
}
h=hist(sampleAverage,probability = TRUE)
abline(v=mean(sampleAverage,col="red"))
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100)
h=hist(sampleMedian,probability=TRUE)
sd(sampleAverage)
mean(sampleAverage)
